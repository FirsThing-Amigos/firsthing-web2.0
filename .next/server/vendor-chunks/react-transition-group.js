"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-transition-group";
exports.ids = ["vendor-chunks/react-transition-group"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-transition-group/CSSTransition.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-transition-group/CSSTransition.js ***!
  \**************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar PropTypes = _interopRequireWildcard(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _addClass = _interopRequireDefault(__webpack_require__(/*! dom-helpers/class/addClass */ \"(ssr)/./node_modules/dom-helpers/class/addClass.js\"));\nvar _removeClass = _interopRequireDefault(__webpack_require__(/*! dom-helpers/class/removeClass */ \"(ssr)/./node_modules/dom-helpers/class/removeClass.js\"));\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _Transition = _interopRequireDefault(__webpack_require__(/*! ./Transition */ \"(ssr)/./node_modules/react-transition-group/Transition.js\"));\nvar _PropTypes = __webpack_require__(/*! ./utils/PropTypes */ \"(ssr)/./node_modules/react-transition-group/utils/PropTypes.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {};\n        if (obj != null) {\n            for(var key in obj){\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n                    if (desc.get || desc.set) {\n                        Object.defineProperty(newObj, key, desc);\n                    } else {\n                        newObj[key] = obj[key];\n                    }\n                }\n            }\n        }\n        newObj.default = obj;\n        return newObj;\n    }\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar addClass = function addClass(node, classes) {\n    return node && classes && classes.split(\" \").forEach(function(c) {\n        return (0, _addClass.default)(node, c);\n    });\n};\nvar removeClass = function removeClass(node, classes) {\n    return node && classes && classes.split(\" \").forEach(function(c) {\n        return (0, _removeClass.default)(node, c);\n    });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](http://www.nganimate.org/) library, you should use it if you're\n * using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity: 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**.\n */ var CSSTransition = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(CSSTransition, _React$Component);\n    function CSSTransition() {\n        var _this;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _React$Component.call.apply(_React$Component, [\n            this\n        ].concat(args)) || this;\n        _this.onEnter = function(node, appearing) {\n            var _this$getClassNames = _this.getClassNames(appearing ? \"appear\" : \"enter\"), className = _this$getClassNames.className;\n            _this.removeClasses(node, \"exit\");\n            addClass(node, className);\n            if (_this.props.onEnter) {\n                _this.props.onEnter(node, appearing);\n            }\n        };\n        _this.onEntering = function(node, appearing) {\n            var _this$getClassNames2 = _this.getClassNames(appearing ? \"appear\" : \"enter\"), activeClassName = _this$getClassNames2.activeClassName;\n            _this.reflowAndAddClass(node, activeClassName);\n            if (_this.props.onEntering) {\n                _this.props.onEntering(node, appearing);\n            }\n        };\n        _this.onEntered = function(node, appearing) {\n            var appearClassName = _this.getClassNames(\"appear\").doneClassName;\n            var enterClassName = _this.getClassNames(\"enter\").doneClassName;\n            var doneClassName = appearing ? appearClassName + \" \" + enterClassName : enterClassName;\n            _this.removeClasses(node, appearing ? \"appear\" : \"enter\");\n            addClass(node, doneClassName);\n            if (_this.props.onEntered) {\n                _this.props.onEntered(node, appearing);\n            }\n        };\n        _this.onExit = function(node) {\n            var _this$getClassNames3 = _this.getClassNames(\"exit\"), className = _this$getClassNames3.className;\n            _this.removeClasses(node, \"appear\");\n            _this.removeClasses(node, \"enter\");\n            addClass(node, className);\n            if (_this.props.onExit) {\n                _this.props.onExit(node);\n            }\n        };\n        _this.onExiting = function(node) {\n            var _this$getClassNames4 = _this.getClassNames(\"exit\"), activeClassName = _this$getClassNames4.activeClassName;\n            _this.reflowAndAddClass(node, activeClassName);\n            if (_this.props.onExiting) {\n                _this.props.onExiting(node);\n            }\n        };\n        _this.onExited = function(node) {\n            var _this$getClassNames5 = _this.getClassNames(\"exit\"), doneClassName = _this$getClassNames5.doneClassName;\n            _this.removeClasses(node, \"exit\");\n            addClass(node, doneClassName);\n            if (_this.props.onExited) {\n                _this.props.onExited(node);\n            }\n        };\n        _this.getClassNames = function(type) {\n            var classNames = _this.props.classNames;\n            var isStringClassNames = typeof classNames === \"string\";\n            var prefix = isStringClassNames && classNames ? classNames + \"-\" : \"\";\n            var className = isStringClassNames ? prefix + type : classNames[type];\n            var activeClassName = isStringClassNames ? className + \"-active\" : classNames[type + \"Active\"];\n            var doneClassName = isStringClassNames ? className + \"-done\" : classNames[type + \"Done\"];\n            return {\n                className: className,\n                activeClassName: activeClassName,\n                doneClassName: doneClassName\n            };\n        };\n        return _this;\n    }\n    var _proto = CSSTransition.prototype;\n    _proto.removeClasses = function removeClasses(node, type) {\n        var _this$getClassNames6 = this.getClassNames(type), className = _this$getClassNames6.className, activeClassName = _this$getClassNames6.activeClassName, doneClassName = _this$getClassNames6.doneClassName;\n        className && removeClass(node, className);\n        activeClassName && removeClass(node, activeClassName);\n        doneClassName && removeClass(node, doneClassName);\n    };\n    _proto.reflowAndAddClass = function reflowAndAddClass(node, className) {\n        // This is for to force a repaint,\n        // which is necessary in order to transition styles when adding a class name.\n        if (className) {\n            /* eslint-disable no-unused-expressions */ node && node.scrollTop;\n            /* eslint-enable no-unused-expressions */ addClass(node, className);\n        }\n    };\n    _proto.render = function render() {\n        var props = _extends({}, this.props);\n        delete props.classNames;\n        return _react.default.createElement(_Transition.default, _extends({}, props, {\n            onEnter: this.onEnter,\n            onEntered: this.onEntered,\n            onEntering: this.onEntering,\n            onExit: this.onExit,\n            onExiting: this.onExiting,\n            onExited: this.onExited\n        }));\n    };\n    return CSSTransition;\n}(_react.default.Component);\nCSSTransition.defaultProps = {\n    classNames: \"\"\n};\nCSSTransition.propTypes =  true ? _extends({}, _Transition.default.propTypes, {\n    /**\n   * The animation classNames applied to the component as it enters, exits or\n   * has finished the transition. A single name can be provided and it will be\n   * suffixed for each stage: e.g.\n   *\n   * `classNames=\"fade\"` applies `fade-enter`, `fade-enter-active`,\n   * `fade-enter-done`, `fade-exit`, `fade-exit-active`, `fade-exit-done`,\n   * `fade-appear`, `fade-appear-active`, and `fade-appear-done`.\n   *\n   * **Note**: `fade-appear-done` and `fade-enter-done` will _both_ be applied.\n   * This allows you to define different behavior for when appearing is done and\n   * when regular entering is done, using selectors like\n   * `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply an\n   * epic entrance animation when element first appears in the DOM using\n   * [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   * simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */ classNames: _PropTypes.classNamesShape,\n    /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */ onEnter: PropTypes.func,\n    /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */ onEntering: PropTypes.func,\n    /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */ onEntered: PropTypes.func,\n    /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * @type Function(node: HtmlElement)\n   */ onExit: PropTypes.func,\n    /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * @type Function(node: HtmlElement)\n   */ onExiting: PropTypes.func,\n    /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * @type Function(node: HtmlElement)\n   */ onExited: PropTypes.func\n}) : 0;\nvar _default = CSSTransition;\nexports[\"default\"] = _default;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-transition-group/CSSTransition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-transition-group/Transition.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-transition-group/Transition.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports[\"default\"] = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;\nvar PropTypes = _interopRequireWildcard(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _reactDom = _interopRequireDefault(__webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\"));\nvar _reactLifecyclesCompat = __webpack_require__(/*! react-lifecycles-compat */ \"(ssr)/./node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js\");\nvar _PropTypes = __webpack_require__(/*! ./utils/PropTypes */ \"(ssr)/./node_modules/react-transition-group/utils/PropTypes.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {};\n        if (obj != null) {\n            for(var key in obj){\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n                    if (desc.get || desc.set) {\n                        Object.defineProperty(newObj, key, desc);\n                    } else {\n                        newObj[key] = obj[key];\n                    }\n                }\n            }\n        }\n        newObj.default = obj;\n        return newObj;\n    }\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar UNMOUNTED = \"unmounted\";\nexports.UNMOUNTED = UNMOUNTED;\nvar EXITED = \"exited\";\nexports.EXITED = EXITED;\nvar ENTERING = \"entering\";\nexports.ENTERING = ENTERING;\nvar ENTERED = \"entered\";\nexports.ENTERED = ENTERED;\nvar EXITING = \"exiting\";\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 0 },\n *   entered:  { opacity: 1 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */ exports.EXITING = EXITING;\nvar Transition = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(Transition, _React$Component);\n    function Transition(props, context) {\n        var _this;\n        _this = _React$Component.call(this, props, context) || this;\n        var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears\n        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n        var initialStatus;\n        _this.appearStatus = null;\n        if (props.in) {\n            if (appear) {\n                initialStatus = EXITED;\n                _this.appearStatus = ENTERING;\n            } else {\n                initialStatus = ENTERED;\n            }\n        } else {\n            if (props.unmountOnExit || props.mountOnEnter) {\n                initialStatus = UNMOUNTED;\n            } else {\n                initialStatus = EXITED;\n            }\n        }\n        _this.state = {\n            status: initialStatus\n        };\n        _this.nextCallback = null;\n        return _this;\n    }\n    var _proto = Transition.prototype;\n    _proto.getChildContext = function getChildContext() {\n        return {\n            transitionGroup: null // allows for nested Transitions\n        };\n    };\n    Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n        var nextIn = _ref.in;\n        if (nextIn && prevState.status === UNMOUNTED) {\n            return {\n                status: EXITED\n            };\n        }\n        return null;\n    }; // getSnapshotBeforeUpdate(prevProps) {\n    //   let nextStatus = null\n    //   if (prevProps !== this.props) {\n    //     const { status } = this.state\n    //     if (this.props.in) {\n    //       if (status !== ENTERING && status !== ENTERED) {\n    //         nextStatus = ENTERING\n    //       }\n    //     } else {\n    //       if (status === ENTERING || status === ENTERED) {\n    //         nextStatus = EXITING\n    //       }\n    //     }\n    //   }\n    //   return { nextStatus }\n    // }\n    _proto.componentDidMount = function componentDidMount() {\n        this.updateStatus(true, this.appearStatus);\n    };\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n        var nextStatus = null;\n        if (prevProps !== this.props) {\n            var status = this.state.status;\n            if (this.props.in) {\n                if (status !== ENTERING && status !== ENTERED) {\n                    nextStatus = ENTERING;\n                }\n            } else {\n                if (status === ENTERING || status === ENTERED) {\n                    nextStatus = EXITING;\n                }\n            }\n        }\n        this.updateStatus(false, nextStatus);\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n        this.cancelNextCallback();\n    };\n    _proto.getTimeouts = function getTimeouts() {\n        var timeout = this.props.timeout;\n        var exit, enter, appear;\n        exit = enter = appear = timeout;\n        if (timeout != null && typeof timeout !== \"number\") {\n            exit = timeout.exit;\n            enter = timeout.enter; // TODO: remove fallback for next major\n            appear = timeout.appear !== undefined ? timeout.appear : enter;\n        }\n        return {\n            exit: exit,\n            enter: enter,\n            appear: appear\n        };\n    };\n    _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n        if (mounting === void 0) {\n            mounting = false;\n        }\n        if (nextStatus !== null) {\n            // nextStatus will always be ENTERING or EXITING.\n            this.cancelNextCallback();\n            var node = _reactDom.default.findDOMNode(this);\n            if (nextStatus === ENTERING) {\n                this.performEnter(node, mounting);\n            } else {\n                this.performExit(node);\n            }\n        } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n            this.setState({\n                status: UNMOUNTED\n            });\n        }\n    };\n    _proto.performEnter = function performEnter(node, mounting) {\n        var _this2 = this;\n        var enter = this.props.enter;\n        var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;\n        var timeouts = this.getTimeouts();\n        var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n        // if we are mounting and running this it means appear _must_ be set\n        if (!mounting && !enter) {\n            this.safeSetState({\n                status: ENTERED\n            }, function() {\n                _this2.props.onEntered(node);\n            });\n            return;\n        }\n        this.props.onEnter(node, appearing);\n        this.safeSetState({\n            status: ENTERING\n        }, function() {\n            _this2.props.onEntering(node, appearing);\n            _this2.onTransitionEnd(node, enterTimeout, function() {\n                _this2.safeSetState({\n                    status: ENTERED\n                }, function() {\n                    _this2.props.onEntered(node, appearing);\n                });\n            });\n        });\n    };\n    _proto.performExit = function performExit(node) {\n        var _this3 = this;\n        var exit = this.props.exit;\n        var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED\n        if (!exit) {\n            this.safeSetState({\n                status: EXITED\n            }, function() {\n                _this3.props.onExited(node);\n            });\n            return;\n        }\n        this.props.onExit(node);\n        this.safeSetState({\n            status: EXITING\n        }, function() {\n            _this3.props.onExiting(node);\n            _this3.onTransitionEnd(node, timeouts.exit, function() {\n                _this3.safeSetState({\n                    status: EXITED\n                }, function() {\n                    _this3.props.onExited(node);\n                });\n            });\n        });\n    };\n    _proto.cancelNextCallback = function cancelNextCallback() {\n        if (this.nextCallback !== null) {\n            this.nextCallback.cancel();\n            this.nextCallback = null;\n        }\n    };\n    _proto.safeSetState = function safeSetState(nextState, callback) {\n        // This shouldn't be necessary, but there are weird race conditions with\n        // setState callbacks and unmounting in testing, so always make sure that\n        // we can cancel any pending setState callbacks after we unmount.\n        callback = this.setNextCallback(callback);\n        this.setState(nextState, callback);\n    };\n    _proto.setNextCallback = function setNextCallback(callback) {\n        var _this4 = this;\n        var active = true;\n        this.nextCallback = function(event) {\n            if (active) {\n                active = false;\n                _this4.nextCallback = null;\n                callback(event);\n            }\n        };\n        this.nextCallback.cancel = function() {\n            active = false;\n        };\n        return this.nextCallback;\n    };\n    _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {\n        this.setNextCallback(handler);\n        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n        if (!node || doesNotHaveTimeoutOrListener) {\n            setTimeout(this.nextCallback, 0);\n            return;\n        }\n        if (this.props.addEndListener) {\n            this.props.addEndListener(node, this.nextCallback);\n        }\n        if (timeout != null) {\n            setTimeout(this.nextCallback, timeout);\n        }\n    };\n    _proto.render = function render() {\n        var status = this.state.status;\n        if (status === UNMOUNTED) {\n            return null;\n        }\n        var _this$props = this.props, children = _this$props.children, childProps = _objectWithoutPropertiesLoose(_this$props, [\n            \"children\"\n        ]); // filter props for Transtition\n        delete childProps.in;\n        delete childProps.mountOnEnter;\n        delete childProps.unmountOnExit;\n        delete childProps.appear;\n        delete childProps.enter;\n        delete childProps.exit;\n        delete childProps.timeout;\n        delete childProps.addEndListener;\n        delete childProps.onEnter;\n        delete childProps.onEntering;\n        delete childProps.onEntered;\n        delete childProps.onExit;\n        delete childProps.onExiting;\n        delete childProps.onExited;\n        if (typeof children === \"function\") {\n            return children(status, childProps);\n        }\n        var child = _react.default.Children.only(children);\n        return _react.default.cloneElement(child, childProps);\n    };\n    return Transition;\n}(_react.default.Component);\nTransition.contextTypes = {\n    transitionGroup: PropTypes.object\n};\nTransition.childContextTypes = {\n    transitionGroup: function transitionGroup() {}\n};\nTransition.propTypes =  true ? {\n    /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`, `'unmounted'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */ children: PropTypes.oneOfType([\n        PropTypes.func.isRequired,\n        PropTypes.element.isRequired\n    ]).isRequired,\n    /**\n   * Show the component; triggers the enter or exit states\n   */ in: PropTypes.bool,\n    /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */ mountOnEnter: PropTypes.bool,\n    /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */ unmountOnExit: PropTypes.bool,\n    /**\n   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.\n   * If you want to transition on the first mount set `appear` to `true`, and the\n   * component will transition in as soon as the `<Transition>` mounts.\n   *\n   * > Note: there are no specific \"appear\" states. `appear` only adds an additional `enter` transition.\n   */ appear: PropTypes.bool,\n    /**\n   * Enable or disable enter transitions.\n   */ enter: PropTypes.bool,\n    /**\n   * Enable or disable exit transitions.\n   */ exit: PropTypes.bool,\n    /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */ timeout: function timeout(props) {\n        var pt = _PropTypes.timeoutsShape;\n        if (!props.addEndListener) pt = pt.isRequired;\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        return pt.apply(void 0, [\n            props\n        ].concat(args));\n    },\n    /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. **Note:** Timeouts are still used as a fallback if provided.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */ addEndListener: PropTypes.func,\n    /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */ onEnter: PropTypes.func,\n    /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */ onEntering: PropTypes.func,\n    /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */ onEntered: PropTypes.func,\n    /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */ onExit: PropTypes.func,\n    /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */ onExiting: PropTypes.func,\n    /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */ onExited: PropTypes.func // Name the function so it is clearer in the documentation\n} : 0;\nfunction noop() {}\nTransition.defaultProps = {\n    in: false,\n    mountOnEnter: false,\n    unmountOnExit: false,\n    appear: false,\n    enter: true,\n    exit: true,\n    onEnter: noop,\n    onEntering: noop,\n    onEntered: noop,\n    onExit: noop,\n    onExiting: noop,\n    onExited: noop\n};\nTransition.UNMOUNTED = 0;\nTransition.EXITED = 1;\nTransition.ENTERING = 2;\nTransition.ENTERED = 3;\nTransition.EXITING = 4;\nvar _default = (0, _reactLifecyclesCompat.polyfill)(Transition);\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-transition-group/Transition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-transition-group/utils/PropTypes.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-transition-group/utils/PropTypes.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports.classNamesShape = exports.timeoutsShape = void 0;\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar timeoutsShape =  true ? _propTypes.default.oneOfType([\n    _propTypes.default.number,\n    _propTypes.default.shape({\n        enter: _propTypes.default.number,\n        exit: _propTypes.default.number,\n        appear: _propTypes.default.number\n    }).isRequired\n]) : 0;\nexports.timeoutsShape = timeoutsShape;\nvar classNamesShape =  true ? _propTypes.default.oneOfType([\n    _propTypes.default.string,\n    _propTypes.default.shape({\n        enter: _propTypes.default.string,\n        exit: _propTypes.default.string,\n        active: _propTypes.default.string\n    }),\n    _propTypes.default.shape({\n        enter: _propTypes.default.string,\n        enterDone: _propTypes.default.string,\n        enterActive: _propTypes.default.string,\n        exit: _propTypes.default.string,\n        exitDone: _propTypes.default.string,\n        exitActive: _propTypes.default.string\n    })\n]) : 0;\nexports.classNamesShape = classNamesShape;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC91dGlscy9Qcm9wVHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsa0JBQWtCLEdBQUc7QUFDckJBLHVCQUF1QixHQUFHQSxxQkFBcUIsR0FBRyxLQUFLO0FBRXZELElBQUlJLGFBQWFDLHVCQUF1QkMsbUJBQU9BLENBQUMsNERBQVk7QUFFNUQsU0FBU0QsdUJBQXVCRSxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSU4sVUFBVSxHQUFHTSxNQUFNO1FBQUVDLFNBQVNEO0lBQUk7QUFBRztBQUU5RixJQUFJSixnQkFBZ0JNLEtBQXlCLEdBQWVMLFdBQVdJLE9BQU8sQ0FBQ0UsU0FBUyxDQUFDO0lBQUNOLFdBQVdJLE9BQU8sQ0FBQ0csTUFBTTtJQUFFUCxXQUFXSSxPQUFPLENBQUNJLEtBQUssQ0FBQztRQUM1SUMsT0FBT1QsV0FBV0ksT0FBTyxDQUFDRyxNQUFNO1FBQ2hDRyxNQUFNVixXQUFXSSxPQUFPLENBQUNHLE1BQU07UUFDL0JJLFFBQVFYLFdBQVdJLE9BQU8sQ0FBQ0csTUFBTTtJQUNuQyxHQUFHSyxVQUFVO0NBQUMsSUFBSSxDQUFJO0FBQ3RCaEIscUJBQXFCLEdBQUdHO0FBQ3hCLElBQUlELGtCQUFrQk8sS0FBeUIsR0FBZUwsV0FBV0ksT0FBTyxDQUFDRSxTQUFTLENBQUM7SUFBQ04sV0FBV0ksT0FBTyxDQUFDUyxNQUFNO0lBQUViLFdBQVdJLE9BQU8sQ0FBQ0ksS0FBSyxDQUFDO1FBQzlJQyxPQUFPVCxXQUFXSSxPQUFPLENBQUNTLE1BQU07UUFDaENILE1BQU1WLFdBQVdJLE9BQU8sQ0FBQ1MsTUFBTTtRQUMvQkMsUUFBUWQsV0FBV0ksT0FBTyxDQUFDUyxNQUFNO0lBQ25DO0lBQUliLFdBQVdJLE9BQU8sQ0FBQ0ksS0FBSyxDQUFDO1FBQzNCQyxPQUFPVCxXQUFXSSxPQUFPLENBQUNTLE1BQU07UUFDaENFLFdBQVdmLFdBQVdJLE9BQU8sQ0FBQ1MsTUFBTTtRQUNwQ0csYUFBYWhCLFdBQVdJLE9BQU8sQ0FBQ1MsTUFBTTtRQUN0Q0gsTUFBTVYsV0FBV0ksT0FBTyxDQUFDUyxNQUFNO1FBQy9CSSxVQUFVakIsV0FBV0ksT0FBTyxDQUFDUyxNQUFNO1FBQ25DSyxZQUFZbEIsV0FBV0ksT0FBTyxDQUFDUyxNQUFNO0lBQ3ZDO0NBQUcsSUFBSSxDQUFJO0FBQ1hqQix1QkFBdUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL1Byb3BUeXBlcy5qcz84NjI0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jbGFzc05hbWVzU2hhcGUgPSBleHBvcnRzLnRpbWVvdXRzU2hhcGUgPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciB0aW1lb3V0c1NoYXBlID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuICBhcHBlYXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJcbn0pLmlzUmVxdWlyZWRdKSA6IG51bGw7XG5leHBvcnRzLnRpbWVvdXRzU2hhcGUgPSB0aW1lb3V0c1NoYXBlO1xudmFyIGNsYXNzTmFtZXNTaGFwZSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgYWN0aXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59KSwgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGVudGVyRG9uZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZW50ZXJBY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXREb25lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0QWN0aXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59KV0pIDogbnVsbDtcbmV4cG9ydHMuY2xhc3NOYW1lc1NoYXBlID0gY2xhc3NOYW1lc1NoYXBlOyJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImNsYXNzTmFtZXNTaGFwZSIsInRpbWVvdXRzU2hhcGUiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJkZWZhdWx0IiwicHJvY2VzcyIsIm9uZU9mVHlwZSIsIm51bWJlciIsInNoYXBlIiwiZW50ZXIiLCJleGl0IiwiYXBwZWFyIiwiaXNSZXF1aXJlZCIsInN0cmluZyIsImFjdGl2ZSIsImVudGVyRG9uZSIsImVudGVyQWN0aXZlIiwiZXhpdERvbmUiLCJleGl0QWN0aXZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-transition-group/utils/PropTypes.js\n");

/***/ })

};
;